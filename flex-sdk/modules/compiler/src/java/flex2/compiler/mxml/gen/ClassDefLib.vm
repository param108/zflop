################################################################################
##
##  ADOBE SYSTEMS INCORPORATED
##  Copyright 2005-2007 Adobe Systems Incorporated
##  All Rights Reserved.
##
##  NOTICE: Adobe permits you to use, modify, and distribute this file
##  in accordance with the terms of the license agreement accompanying it.
##
################################################################################

#**
 *	ClassDefLib.vm
 *
 *	"Library" of macros for ClassDef.vm.
 *
 *	Note: these macros assume ClassDef's context of (MxmlDocument $doc, VelocityUtil $util)
 *#


#**
 *
 *	trace
 *	emits passed string if util.debug == true
 *
 *#
#macro (trace $str)
#if ($util.debug)
$str
#end
#end


#**
 *
 *	embedText
 *	write $text into current output, after registering line mapping to context
 *  Note: these line mappings are permanent (they're written to the bytecode as well as being used for compile errors).
 *  for compile-error only mappings, see next
 *
 *#
## commented version emits line numbers as comments in the generated code. When using, be sure to uncomment the second (blank) line.
## #macro (embedText $text $origLine)#if ($origLine > 0)$util.mapLines($origLine, $text)/*$origLine>*/#end$text#if ($origLine > 0)/*<$origLine*/#end
##
#macro (embedText $text $origLine)#if ($origLine > 0)$util.mapLines($origLine, $text)#end$text
#end


#**
 *
 *	embedTextMapCompileErrorsOnly
 *	write $text into current output, after registering line mapping to context
 *  Note: these line mappings are in effect only for compile-time error reporting. They are not written into bytecode
 *
 *#
## commented version emits line numbers as comments in the generated code. When using, be sure to uncomment the second (blank) line.
## #macro (embedTextMapCompileErrorsOnly $text $origLine)#if ($origLine > 0)$util.mapCompileErrorLines($origLine, $text)/*CE:$origLine>*/#end$text#if ($origLine > 0)/*<CE:$origLine*/#end
##
#macro (embedTextMapCompileErrorsOnly $text $origLine)#if ($origLine > 0)$util.mapCompileErrorLines($origLine, $text)#end$text
#end


#**
 *
 *	emitInitializers
 *
 *#
#macro (emitInitializers $indent $initializerIterator $lvalueBase)
#foreach ($init in $initializerIterator)
#embedText("$indent$init.getAssignExpr($lvalueBase);" $init.lineRef)
#end
#end


#**
 *
 *	emitComponentStyleSettings
 *
 *#
#macro (emitComponentStyleSettings)
#set ($iter = $doc.root.styleAndEffectInitializerIterator)
#if ($iter.hasNext())
		//	initialize component styles
		if (!this.styleDeclaration)
		{
			this.styleDeclaration = new CSSStyleDeclaration();
		}

		this.styleDeclaration.defaultFactory = function():void
		{
#foreach ($init in $iter)
#embedText("			this.${init.name} = ${init.valueExpr};" $init.lineRef)
#end
		};
#end

#set ($effectEventNames = $doc.root.effectNames)
#if ($effectEventNames.length() > 0)
		//	register effect events
		this.registerEffects( [ $effectEventNames ] );
#end
#end


#**
 *
 *	emitComponentInitializers_1
 *  initializers that run in the constructor of an IFlexDisplayObject
 *
 *#
#macro (emitComponentInitializers_1)

		//	our style settings
#emitComponentStyleSettings()

#if ($doc.stylesContainer.styleDefs.hasNext() || ($doc.isMain && $doc.isContainer))
		//	ambient styles
		mx_internal::_${doc.className}_StylesInit();
#end

		//	properties
#emitInitializers("		" $doc.propertyInitializerIterator "this")

		//	events
#emitInitializers("		" $doc.root.eventInitializerIterator "this")

#end


#**
 *
 *	emitComponentInitializers_2
 *  initializers that run in the initialize() method of an IFlexDisplayObject
 *
 *#
#macro (emitComponentInitializers_2)

#if ($doc.bindingExpressions.size() > 0)
		var bindings:Array = ${doc.convertedClassName}_bindingsSetup();
		var watchers:Array = [];

		var target:$doc.className = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("${doc.watcherSetupUtilClassName}");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					bindings,
					watchers);

		for (var i:uint = 0; i < bindings.length; i++)
		{
			Binding(bindings[i]).execute();
		}

		mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
		mx_internal::_watchers = mx_internal::_watchers.concat(watchers);
#end

#emitInitializers("		" $doc.proceduralVisualChildInitializerIterator "this")

#end


#**
 *
 *	emitStylesInitFunc
 *	emit styles initialization function with specified name
 *
 *#
#macro (emitStylesInitFunc $fname)
#trace("	//	initialize style defs for $doc.className")

	mx_internal static var ${fname}_done:Boolean = false;

	mx_internal function $fname():void
	{
		//	only add our style defs to the StyleManager once
		if (mx_internal::${fname}_done)
			return;
		else
			mx_internal::${fname}_done = true;

		var style:CSSStyleDeclaration;
		var effects:Array;

#foreach ($styleDef in $doc.stylesContainer.styleDefs)
		// ${styleDef.name}
#if ($styleDef.isTypeSelector())
		style = StyleManager.getStyleDeclaration("${styleDef.typeName}");
#else
		style = StyleManager.getStyleDeclaration(".${styleDef.typeName}");
#end
		if (!style)
		{
			style = new CSSStyleDeclaration();
#if ($styleDef.isTypeSelector())
			StyleManager.setStyleDeclaration("${styleDef.typeName}", style, false);
#else
			StyleManager.setStyleDeclaration(".${styleDef.typeName}", style, false);
#end
		}
#if ($styleDef.styles.size() > 0)
		if (style.factory == null)
		{
			style.factory = function():void
			{
#foreach ($style in $styleDef.styles)
				this.${style.name} = ${style.value};
#end
			};
		}
#end
#if ($styleDef.effectStyles.size() > 0)
		effects = style.mx_internal::effects;
		if (!effects)
			effects = style.mx_internal::effects = new Array();
#foreach ($effectStyle in $styleDef.effectStyles)
		effects.push("${effectStyle}");
#end
#end
#end

#if ($doc.isMain && $doc.isContainer)
		StyleManager.mx_internal::initProtoChainRoots();
#end
	}
#end


#**
 *
 *	emitEmbedMetadata
 *
 *#
#macro (emitEmbedMetadata $embed)
#embedText("[Embed(#set ($vals = $embed.getAttributes())#foreach( $key in $embed.getAttributes().keySet() )#if ($velocityCount > 1), #end#set ($val = $vals.get($key))$key='$val'#end)]" $embed.xmlLineNumber)
#end


#**
 *
 *	emitBindingsSetup
 *
 *#
#macro (emitBindingsSetup $convertedClassName)
    private function ${convertedClassName}_bindingsSetup():Array
    {
        var result:Array = [];
        var binding:Binding;

#foreach ($bindingExpression in $doc.bindingExpressions)
#if ($bindingExpression.isRepeatable())
        binding = new mx.binding.RepeatableBinding(this,
            function(instanceIndices:Array,
                     repeaterIndices:Array):${bindingExpression.destinationTypeName}
            {
#if (${bindingExpression.destinationTypeName} == "String")
#embedText("                var result:* = $bindingExpression.repeatableSourceExpression;" $bindingExpression.xmlLineNumber)
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
#else
#embedText("                return $bindingExpression.repeatableSourceExpression;" $bindingExpression.xmlLineNumber)
#end
            },
            function(_sourceFunctionReturnValue:${bindingExpression.destinationTypeName},
                     instanceIndices:Array):void
            {
#if ($bindingExpression.isStyle())
                ${bindingExpression.getDestinationPathRoot(true)}.setStyle("${bindingExpression.destinationLValue}", _sourceFunctionReturnValue);
#elseif ($bindingExpression.isDestinationObjectProxy())
                ${bindingExpression.getDestinationPathRoot(true)}.${bindingExpression.destinationLValue} = new mx.utils.ObjectProxy(_sourceFunctionReturnValue);
#else
                ${bindingExpression.getDestinationPathRoot(true)}.${bindingExpression.destinationLValue} = _sourceFunctionReturnValue;
#end
            },
            "${bindingExpression.getDestinationPath(false)}");
#else
        binding = new mx.binding.Binding(this,
            function():${bindingExpression.destinationTypeName}
            {
#if (${bindingExpression.destinationTypeName} == "String")
#embedText("                var result:* = $bindingExpression.sourceExpression;" $bindingExpression.xmlLineNumber)
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
#else
#embedText("                return $bindingExpression.sourceExpression;" $bindingExpression.xmlLineNumber)
#end
            },
            function(_sourceFunctionReturnValue:${bindingExpression.destinationTypeName}):void
            {
#if ($bindingExpression.isStyle())
                ${bindingExpression.getDestinationPathRoot(true)}.setStyle("${bindingExpression.destinationStyle}", _sourceFunctionReturnValue);
#elseif ($bindingExpression.isDestinationObjectProxy())
                ${bindingExpression.getDestinationPath(true)} = new mx.utils.ObjectProxy(_sourceFunctionReturnValue);
#else
				${bindingExpression.getNamespaceDeclarations()}
#embedText("                ${bindingExpression.getDestinationPath(true)} = _sourceFunctionReturnValue;" $bindingExpression.xmlLineNumber)
#end
            },
            "${bindingExpression.getDestinationPath(false)}");
#if (${bindingExpression.twoWayCounterpart})
        binding.twoWayCounterpart = result[${bindingExpression.twoWayCounterpart.id}];
        result[${bindingExpression.twoWayCounterpart.id}].twoWayCounterpart = binding;
#end
#end
        result[${bindingExpression.id}] = binding;
#end

        return result;
    }

    private function ${convertedClassName}_bindingExprs():void
    {
        var destination:*;
#foreach ($bindingExpression in $doc.bindingExpressions)
#embedText("		[Binding(id='$bindingExpression.id')]" $bindingExpression.xmlLineNumber)
## We only output the source expression for Binding tags, because we can't reasonably
## figure out the type of the source expression and so we use "*" in the _bindingsSetup()
## function.  If skipped outputting the source expression, potential coersion errors would
## not be caught by ASC.  Outputting all source expressions would be overkill.
#if ($bindingExpression.destination)
#embedText("		destination = $bindingExpression.sourceExpression;" $bindingExpression.xmlLineNumber)
#else
#embedText("		$bindingExpression.destinationProperty = $bindingExpression.sourceExpression;" $bindingExpression.xmlLineNumber)
#end
#end
    }

    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil):void
    {
        (${doc.className})._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil;
#end


#**
 *
 *	emitInitializerSupportDefs
 *
 *#
#macro (emitInitializerSupportDefs)

    //	supporting function definitions for properties, events, styles, effects
#foreach($def in $doc.definitionIterator)
#foreach($fragment in $def)
#embedText($fragment.text $fragment.xmlLineNumber)
#end

#end

#if ($doc.bindingExpressions.size() > 0)
	//	binding mgmt
#emitBindingsSetup( ${doc.convertedClassName} )
#end

#if ($doc.stylesContainer.styleDefs.hasNext() || ($doc.isMain && $doc.isContainer))
#emitStylesInitFunc("_${doc.className}_StylesInit")
#end

#end


